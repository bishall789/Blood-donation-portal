{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Bisha\\\\Desktop\\\\6th sem\\\\Elective\\\\blood-donation-platform\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function useAuth() {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetchUserProfile(token);\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchUserProfile = async token => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        setError(null);\n      } else {\n        localStorage.removeItem(\"token\");\n        setError(\"Session expired. Please login again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      localStorage.removeItem(\"token\");\n      setError(\"Network error. Please check your connection.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: username.trim(),\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem(\"token\", data.token);\n        setUser(data.user);\n        setError(null);\n        return true;\n      } else {\n        setError(data.message || \"Login failed\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      setError(\"Network error. Please check your connection.\");\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async userData => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/api/auth/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: userData.username.trim(),\n          email: userData.email.trim().toLowerCase(),\n          password: userData.password,\n          bloodGroup: userData.bloodGroup\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem(\"token\", data.token);\n        setUser(data.user);\n        setError(null);\n        return true;\n      } else {\n        setError(data.message || \"Signup failed\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      setError(\"Network error. Please check your connection.\");\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateUserRole = async (role, bloodGroup) => {\n    try {\n      setError(null);\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`${API_BASE_URL}/api/auth/update-role`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          role,\n          bloodGroup\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        setError(null);\n        return true;\n      } else {\n        setError(data.message || \"Failed to update role\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Update role error:\", error);\n      setError(\"Network error. Please try again.\");\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setError(null);\n  };\n  const updateUser = userData => {\n    setUser(prev => prev ? {\n      ...prev,\n      ...userData\n    } : null);\n  };\n  const clearError = () => {\n    setError(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    signup,\n    logout,\n    updateUser,\n    updateUserRole,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 10\n  }, this);\n}\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","context","Error","API_BASE_URL","process","env","REACT_APP_API_URL","AuthProvider","children","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","fetchUserProfile","response","fetch","headers","Authorization","ok","userData","json","removeItem","console","login","username","password","method","body","JSON","stringify","trim","data","setItem","message","signup","email","toLowerCase","bloodGroup","updateUserRole","role","logout","updateUser","prev","clearError","value","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Bisha/Desktop/6th sem/Elective/blood-donation-platform/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useEffect, useState, type ReactNode } from \"react\"\n\ninterface User {\n  id: string\n  username: string\n  email: string\n  role: \"donor\" | \"requester\" | \"admin\"\n  bloodGroup?: string\n  isAvailable?: boolean\n  matchStatus?: string\n  isDonor?: boolean\n  isRequester?: boolean\n}\n\ninterface AuthContextType {\n  user: User | null\n  loading: boolean\n  error: string | null\n  login: (username: string, password: string) => Promise<boolean>\n  signup: (userData: any) => Promise<boolean>\n  logout: () => void\n  updateUser: (userData: Partial<User>) => void\n  updateUserRole: (role: \"donor\" | \"requester\", bloodGroup?: string) => Promise<boolean>\n  clearError: () => void\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\"\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      fetchUserProfile(token)\n    } else {\n      setLoading(false)\n    }\n  }, [])\n\n  const fetchUserProfile = async (token: string) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      })\n\n      if (response.ok) {\n        const userData = await response.json()\n        setUser(userData)\n        setError(null)\n      } else {\n        localStorage.removeItem(\"token\")\n        setError(\"Session expired. Please login again.\")\n      }\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error)\n      localStorage.removeItem(\"token\")\n      setError(\"Network error. Please check your connection.\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      setError(null)\n      setLoading(true)\n\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: username.trim(), password }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        localStorage.setItem(\"token\", data.token)\n        setUser(data.user)\n        setError(null)\n        return true\n      } else {\n        setError(data.message || \"Login failed\")\n        return false\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error)\n      setError(\"Network error. Please check your connection.\")\n      return false\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const signup = async (userData: any): Promise<boolean> => {\n    try {\n      setError(null)\n      setLoading(true)\n\n      const response = await fetch(`${API_BASE_URL}/api/auth/signup`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          username: userData.username.trim(),\n          email: userData.email.trim().toLowerCase(),\n          password: userData.password,\n          bloodGroup: userData.bloodGroup,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        localStorage.setItem(\"token\", data.token)\n        setUser(data.user)\n        setError(null)\n        return true\n      } else {\n        setError(data.message || \"Signup failed\")\n        return false\n      }\n    } catch (error) {\n      console.error(\"Signup error:\", error)\n      setError(\"Network error. Please check your connection.\")\n      return false\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateUserRole = async (role: \"donor\" | \"requester\", bloodGroup?: string): Promise<boolean> => {\n    try {\n      setError(null)\n      const token = localStorage.getItem(\"token\")\n\n      const response = await fetch(`${API_BASE_URL}/api/auth/update-role`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ role, bloodGroup }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setUser(data.user)\n        setError(null)\n        return true\n      } else {\n        setError(data.message || \"Failed to update role\")\n        return false\n      }\n    } catch (error) {\n      console.error(\"Update role error:\", error)\n      setError(\"Network error. Please try again.\")\n      return false\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    setUser(null)\n    setError(null)\n  }\n\n  const updateUser = (userData: Partial<User>) => {\n    setUser((prev) => (prev ? { ...prev, ...userData } : null))\n  }\n\n  const clearError = () => {\n    setError(null)\n  }\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    signup,\n    logout,\n    updateUser,\n    updateUserRole,\n    clearError,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}